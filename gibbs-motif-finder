import random

def gibbs_sampler(dna, k, t, N):
    best_motifs = random_motifs(dna, k, t)

    for _ in range(N):
        i = random.randint(0, t - 1)
        current_motifs = best_motifs[:i] + best_motifs[i+1:]
        profile = profile_from_motifs(current_motifs)
        motif_i = profile_most_probable(dna[i], k, profile)
        best_motifs[i] = motif_i

    return best_motifs

def random_motifs(dna, k, t):
    motifs = []
    for seq in dna:
        start = random.randint(0, len(seq) - k)
        motifs.append(seq[start:start+k])
    return motifs

def profile_most_probable(text, k, profile):
    max_prob = -1
    most_probable = ""
    for i in range(len(text) - k + 1):
        kmer = text[i:i+k]
        prob = 1
        for j in range(k):
            prob *= profile[kmer[j]][j]
        if prob > max_prob:
            max_prob = prob
            most_probable = kmer
    return most_probable

def profile_from_motifs(motifs):
    profile = {'A': [], 'C': [], 'G': [], 'T': []}
    k = len(motifs[0])
    for i in range(k):
        column = [motif[i] for motif in motifs]
        for base in ['A', 'C', 'G', 'T']:
            count = column.count(base) + 1  # Pseudocount
            profile[base].append(count / (t + 4))  # Add pseudocount to denominator
    return profile

k, t, N = 15, 20, 2000
dna = ["GGTTCGTCCAACAATAGGCGTTTCTCTACGTCGACTTGAGAACCTATGCGAACGTACGGCTTGAATTCCTTCTCTTACGTACTTTTAGGACAGCCTGACCGAGTTTCGGGAATGCTTCCCGCGCTTGGGGACCTAATGGTTGGCTCTTGCAACTATGATTCTCACTCGAACACAATTCTACGACTATTAAATCCGATCTTAACGGTTGGATGTGAAATATTCGAGGACTTCCACCATGTATAGAATCGTGCTATAATAGGGCCCTACGCGGGATGTTCTAGGGATACCCGATAGGGGGTCACCCGGGGTTCGTCCAACAAT", "AGGCGTTTCTCTACGTCGACTTGAGAACCTATGCGAACGTACGGCTTGAATTCCTTCTCTTACGTACTTTTAGGACAGCCTGACCGAGTTTCGGGAATGCTTCCCGCGCTTGGGGACCTAATGGTTGGCTCTTGCAACTATGATTCTCACTCGAACACAATTCTACGACTATTAAATCCGATCTTAACGGTTGGATGTGAAATATTCGAGGACTTCCACCATGTATATGTGGCAGATTACTGGAATCGTGCTATAATAGGGCCCTACGCGGGATGTTCTAGGGATACCCGATAGGGGGTCACCCGGGGTTCGTCCAACAAT", "AGCAACGAGAGGGTCTCTAATTAAGGAGCGTCGTACGTACCCTTGCGTAGCTCTGTCGTTGTACTCGAAAAGGGTAGCTCCGACAGTCTTGATGGAACCCTCGCTGACAATTGGTGTATACGACGCATGTCTATGTTACCCATTGGAAGGGGAGTATACAAGGACACAATGCACGATTCCTGGCAATCAGCGGTCTAGTGTTATATTATACTGTTCGGTAGTGGTGGTCGCCCGGAGTCAGGACAAGTGGGTTTTAACTAATATAAAGATGTGTTGCTTAGACGTCGAAGACCGAACGCTGGCCGCTCTGGATGATACAAC", "GGACGCTGATCCCGAGTTGACCATACCTTGATATCTGGCTATCCCTTTTCGGGAACGCATCCGGCTCGGGTAGTATACAGGGTGTAGCAGATTACTGTCGACCTGCTCTAGAATAATTTCTACGGATTATTCCGTTGGCGAAGGGACCCTACGGACAAAAGACATTGTGTGACGAGGCGAGAATGAGTAACCGGAGCCATACCCACCAATCCCAGAAACAATGAAGACTGTGAGCCCTCGATTCTTCTACGTCCTGTGACTTTTCGACATCTTCACGCCACCAAGAACGGAGTGGACATACGTATATTCTTACGCCGCGCT", "TTTGTACAATCCGCAAAGTCCGGGCCTAGCAAGCCTAAGAGAGTTCTGTCAAGAAAGTAGATATTCAGACCAGTATGCGATGGCTTGGCAAAGCTTGGTTTCCTCAGTGGTGGTCAATTCGAGTACTAAAATGGAGTCAATACTAAATGGTCACTCTATCAGTTGGCTTAGATTACTGACTCCACGTAGGCAATCTGGAGTAACTCACTATCACCGAGCTAACCCCTCCCCGCCGATCAAGGGGACGGGCTCGGTTTCGCATTGGTCTAACGAGCAGGATCTCTGCCACTAATGCTTAACTCTGAAGACATGCGCTTGATT", "CTTCCACGAAAATTCGGGAGCGCGTCTGTCATTTAGACCCCGATGCTCAAGCCCCTACCAGATTGGCGAGGTATGCCGATAATAATTAATTCTAGCCCGCACTTACGCCTGAGTAGACTTTCGAGCTACTTTATCGAGGGCATGCTAACTGAGTGATCGATGCGTCGGGTAATCTTGAGTATTCCTCCCGGCATGTTATAGAAATCTGCCACGATCAGCCTCGGCAAAGGGAGAACAGTCTGAATTGCATACTCCTCAGTGACGGTACATGTCTCGGGATCTTGAAGTTAAGATGATAAAGGTCGTGGTGGAGATTAGTAT", "CGAACCCTCTAGGCTGTTAGGCATTACTGGTACGACGTCGTTATGACCGAGCAGGTCAGGTGTCCTGGGCACACAATGTGTGCCAGTACTCTGCAAAAAAGATAACCCACACTTGATCAGTCGCGAAGGTCCGGATGGAGGCCAGAAGTAGAGGGATCACGTAAAATTCGAATTCTGTCACTCCAATGCTATTAAGCGTGCCATGGTCAGGATTCCGAATCCGGAACTTACGGGCCAGGTTTAAATCTCCGATGTACTTTATAGCAATATCAACACGGAAAGCTCGGCGCGAGGTTTGGTTAATTGATGTAGAGAGAGTTT", "GGCTAATGGACTCTTCACTTCTACCGAACTACCAAGGAGAGGCCGTTACTGACGGGCTATCCCCGTATGGTTGCGAAATGCTAGTGATATCTGAGTCTTTTATAAATAGAACACATAACGCCCTTCTTACGTTAACCCTAGCCAGTCGTCAATGCCTGTTTGGTGTTATCTTTTACTGTCTAGCTAGAGCGATCGGTTTGACATACAAAGTTTTCCGTTCGGGAGTGGCGGCCGTCAGTACCCTGTCGCTCAAGTCTTTGACGTGACAATCCCCAAACCGAGCCTATTCTGAACCTATAGGTTCCCGGCTCTTCAGGCAGT", "TCGAGGTGACAATTGCTCCCTTGCTCGAAATGATTCTCATCACGTACGTCCCGTGAAATTGCGGATTTGTCGACATCTAACGGTTATGGTTTGCATCTCTACCTTACGGGCTTTTGTCACAATGCCTGTAGAGAGCCCGAAGTCTTGCATTGCGAGTTGTTATACTAGCTCTACCGGGACAATGGAGCGGACGCAAGGATCGAGTACGTCTACTACATGTCTCTAATATGCCGCCTGCGTAGGGAGGTATTCTGAATCCCGTCGCAGTGTATTTACTTCCGGTCGCAAGATGTTGGAACGCGTGTTGCTGATTACTGGACA", "AGAGCCCGTCTAGTGAACTAAAGATTATTCCGCTTCATTGAACATTTGAAGCGTCCCAACAAGAGCTAAATCTCCACATGTGCGTTCAGTTTGAAATGCACGTGGCTGTGTTATGCTTTACTGTAAGGAGGGTTCGGTCAACCTACCCGCCAAACTTCCGAACTATGGCACCGTGCGATATAGACTCGCGCCGCGTGCTTTCAGTCCGCAGGCAGGGCCGGCTAATGCGGCATGAGCCCTAGGGGGGAGATGGAGGCCGAGTGGCCGGGTAGAACTGACTCATGTTCCACGACCTCGCAAATGTGAGAGAAGGCTCGAGAT", "CATGGCAATCTGTTGAATGAAATCGTTAAGCTTACCCGTAACTCGTACTGTGAGTAAGAAAACCCATTGTAATGATAGCGCGGGGCAAGAAGGCTCTTAAGAGGGTCTTGTTATATCGGGGTACGACGTTACGCAATCTACAGATTACATTAAACCAAGCCGGGAACCTGTCGACTGGGGGAACTGACCAATGGACGCAGTACGTAGCGACACCCGGGGTGCACGGGACGGTGCGTGTTATAGATTCGCGGGGTGGAATAGGGCAACTCGGGTTACCCACATTCGGATGTTAACTAAGCAATCCAGAGGACTAATACGTTT", "TCTAATAGTCTGGCTCCCAATACTTGTCATCGGGAATGTCAGTTACACCCCTGAAAGGATGGCCGTAGCTACCATGCCCAAAAGGGGTGCACAACACATCGTGAACCCTATAGTTGTCGGACACGCCAGAAATGTTTTGTAGGGATAACCCCAGTCTTGGTCCCGAACCTCTATGCGATCCTAGGGCAATGGATTAATCCGTATCCTCTTAATCTGCGTTTGAATCATGCCATATGATGCGGCACTACTGTTTCACTGTCGTCACGACGGTTAGCGCTCACCGGTGTTAATCATTACTGCTGGATTTCGTACGTTGCAGCT", "AAGGACGTCTGGCTCCAGACGACAGTCGGAAGAAACAACGAAGGATACTTCTGGTAGCAGGATTAGGGGGTATTCCTCCCCGAATCCTGTCGTGATAGACGGCGTTGTTCGGAATTTCTTTACAGTACCATAAATGATCAGCTTAGGTCTTGCCTTCCCGGGGGTAGTACCTCAGAAGGTCGAGGGCTAGTCCGCCTACTTACGACCCCGTATCCGCCTACCCACCGCAGCCCTTTTGTGGGTGAGTTATAGATTACCTTATCTCATAGGTGGCTGCCAAACTAGTCGAACTACATCGGGGTTAGAGCAACTGCACTACAT", "CAGCCTGGCTGTGGAAAAGACATAGTAATCAGTTAGAGCCATCTACACCAATGAGACTGGCGGAAATCCCACTTTTGATCCCACACCTTCGTCGTGCAGTACAGACCCTCCGGGGGCCAAGAGACACAAGTATTATAGTATTCGGAGGAGTATGCATATCGGCAATTTCGGTGACGATTTTCCTTGTTGAACTAGGAGGAACTGGGTAAGAAGAATCCCCCAAATACGAATAAGAGACCGGTTGTTCAGATAGATTACTGGGTAGTTATCTCTAGTGAACCAGATGAAATAGACGCAATGTATGACTACGGTTTGTGGGAC", "AGTGGGATCGGCACGAGGCAATATATCAGATAGCAAGGCTTCGACTTTGTCGTCAGCCTGTATAGATTACTGCGTAAATGTATATACGACCGTAGAGGGGGGGTTACGATATTATGGCTACGCATTTTATGACATACTGGAGGATGCGTCGCAGTAGTGGCTCGCCGTCCTAGTAACAGTGATGCCCTGCACTACCCAGCAGTCACGCGCCTCGGCTCTCTTTCACAAAATCCATGTATTTATGAAATTTTTGAGCGCTTACTCGACCTCATGTTATAGCTCACGTGCGCACTGGTAAACTACTACGACATAAGTTTCCCC", "CAGTTTCGCTCTAGTCACCGCATGGTCGCCGTGCAATATGTTTTATAAATACTGAAAACCGGCATTCAGAATTCGTCTAAGTGGAGACCTCCCAGCGCTTGGTTCGTGGTAATTTTGGGTCACCCACGCGGCATGTTGGGTCGCATCATTAAGCTATTAGACATCGTGTGAACGCCCGAGCCAACCCCCCTTATTGCTAGGTCTACGGAGCGGCAGCTATTTAGCCGAGCGCCCCCAGTCCTTATAGATTACTACTTGACTGGAATTGGATGCTCTCCGCTGAGTACATGGGGCAGTCGATTAACAGTATACCAGGGTGCA", "AGCCTTTGATGGTTTTGTCTTATTTCAAATCGATCTGCTATAAACAGTGACCGGAGCACAGCTGCTTTTGTCTGCTCGCTTTAGGTGGCGTGTACTGGATTAGATGCCACCGAATTTTATATCCTTCTCGAGGGATGAAGGTCCCGATAATTGTTGGCGATTACTGCTCCGGAGTCCTTAACGACTCTATAGGGACCTCATACCTTTGTAAGTTCCTATACGGGGCGTTCGCGGGTGTTCTAGTTGATCCTTTGACTAGCCAGGTCTACAGGTATTCACTCGATAATCCACAAAGGTCCCATCCCATGTGGATCACTTCCC", "GTGGACCCGCTCTGGGTGGGACATCTTCATCGCCTGGAGTTGCCATAACGCGCACAAGCCTCCAGGTGCAACAGAGGCGAGACGGCTGTTTTGGCGAATTCTCAAGAACAGAAAGAAGGCAAGGAACTTCCCGTCTGGTCTTTAAGTTAAATCGAAGACTAATACAGATATGTGTTATAGATGCTTGGCCCGCCTTCTAAAGTATATGGTACTGTCTGATTTTCCGAAGATGTACGCATATACCCTATCTGTTCCTCGAGCCGTCTTATGTCGCTGGTAAGCTAGATCAAGGTATTTAGTGGAAGCACAGGGCTGGGTGAC", "AAGTAACAAGAGTGGCACCATGAGCCATAGCGTTCCAAGCTTATAGCCACCGATGATAGTCTCGGTATAAGTGACTCTGTTATAGGGCACTGAACATTTGTGTCCTAGACCGTTATAATGATGCTCAACCGAGATAGGCCGACGAACCCCTTCTTAAATACGCACTCGCAACGCCCCAAATACGCCTCGCGCCCAGAGAAGGCTTCACAGTACTGCACGATGGGTTGGTACAACCAATAGCAGTTAAGGAAACTTTCAAATCATGAAGTCATGCCACGCAAGGGATCACGTTCCGATTACTAACGTGCAAGGCGACCATTG", "TACCAGAGTGACATGACTAACGAGCCATATTCCCTCGACGGCACAATCCCGCTCTTACCGGAATCCGCGTATTGTCGTGCGTGACCATCGTACTCTCAGACGCATTACAACTCGTAGTGCAACTGGCAAGACCACACCGTTCTTCGTGTCTAGCCCAAGTTTTTATTAACAGACTCTTTTTGTTATAGATTATATAGCAAGCTGGAACATCGATTCGTCTCCCCCCGTTTAGTAGCTCGAAACCCGTATCCTCTAGATTTTCAACGGACCGGAACCGAGACCGGTTTTTCGTCCGTGAGACCCCTCGATAACAGGACCCGA"]
# Call the function and print the result
result = gibbs_sampler(dna, k, t, N)
for motif in result:
    print(motif)
